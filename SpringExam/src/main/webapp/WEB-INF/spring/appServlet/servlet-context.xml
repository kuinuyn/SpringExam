<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven>
		<argument-resolvers>
			<beans:bean class="com.spring.common.CustomMapArgumentResolver" />
		</argument-resolvers>
	</annotation-driven>
	
	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />
	<resources mapping="/css/**" location="/css/" />
	<resources mapping="/img/**" location="/img/" />
	<resources mapping="/common/images/**" location="/common/images/" />
	<resources mapping="/js/**" location="/js/" />
	<resources mapping="/upload/**" location="/upload/" />

	
	<!-- BeanNameViewResolver 설정 -->
	<beans:bean class="org.springframework.web.servlet.view.BeanNameViewResolver">
		<beans:property name="order" value="0" />
	</beans:bean>
	
	<!-- Tile BeanResolver 설정 -->
	<beans:bean id="tilesViewResolver" class="org.springframework.web.servlet.view.UrlBasedViewResolver">
		<beans:property name="viewClass" value="org.springframework.web.servlet.view.tiles3.TilesView" />
		<beans:property name="order" value="1" />
	</beans:bean>
	
	<beans:bean id="tilesConfigurer" class="org.springframework.web.servlet.view.tiles3.TilesConfigurer">
		<beans:property name="definitions">
			<beans:list>
				<beans:value>classpath:config/spring/tiles-def.xml</beans:value>
			</beans:list>
		</beans:property>
	</beans:bean>
	
	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
		<beans:property name="order" value="2" />
	</beans:bean>
	<!-- MultipartResolver 설정 -->
	<beans:bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<beans:property name="maxUploadSize" value="100000000" />
		<beans:property name="maxInMemorySize" value="100000000" />
	</beans:bean>
	
	<!-- 파일 다운로드를 처리할 클래스를 빈(bean)으로 등록 -->
	<beans:bean id="fileDownloadUtil" class="com.spring.common.util.FileDownloadUtil" />
	
	<context:component-scan base-package="com.spring.*.web, com.spring.slight.*.web" use-default-filters="false">
		<context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
	</context:component-scan>
	
	<interceptors>
		<interceptor>
			<mapping path="/**"/>
			<beans:bean id="loggerInterceptor" class="com.spring.common.logger.LoggerInterceptor"></beans:bean>
		</interceptor>
	</interceptors>
	
	
	
	<beans:bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter" />
	
	<!-- 엑셀 다운로드 뷰 -->
	<beans:bean id="excelDownloadView" class="com.spring.common.util.ExcelDownloadView" />
	
	<!-- JSON 뷰 -->
	<beans:bean id="jsonView" class="org.springframework.web.servlet.view.json.MappingJackson2JsonView"/>
	
</beans:beans>
